name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python demos
      run: |
        python simple_demo.py
        python comprehensive_demo.py

    - name: Test Flask app
      run: |
        python -c "from app import app; print('Flask app imports successfully')"

  test-nodejs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Run Node.js demo
      run: node demo-showcase.js

    - name: Check Node.js files
      run: |
        node -e "console.log('Node.js environment working')"
        npm run --silent build 2>/dev/null || echo "Build step optional"

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Lint Python code
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check Python formatting
      run: |
        black --check --diff .
        isort --check-only --diff .

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        cat bandit-report.json

    - name: Check for vulnerable dependencies
      run: |
        safety check --full-report

  build:
    runs-on: ubuntu-latest
    needs: [test-python, test-nodejs, lint, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: Install all dependencies
      run: |
        pip install -r requirements.txt
        npm ci

    - name: Build project
      run: |
        # Generate all demo outputs
        python comprehensive_demo.py
        # Any build steps would go here

    - name: Archive generated files
      uses: actions/upload-artifact@v4
      with:
        name: generated-files
        path: |
          *.html
          *.json
          *.sql
          *.txt
          *.jsx
          *.py
        retention-days: 30

  deploy-demo:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        keep_files: true
